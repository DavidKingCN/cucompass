基础工程还需要的内容，目前能够想到的：
1.生成sql处理sql字段值中存在转义字符的情形。
2.抓取更多的未知异常。能够在异常出现问题的时候继续运转而不中断。
3.能够配置化处理代理ip的情形，总结几种情形可以配置化获取代理ip，通过更新缓存来动态更新代理ip。
4.添加redis缓存处理，将能够判断重复的重要信息放入缓存来判断入库数据是否重复。
5.支持hbase，mongdb，用来保留解析原始数据的留存备份。支持再次处理时候对数据重复保留还是更新
6.支持定时任务。能够配置化处理一批同行业垂直任务 能够对允许的任务做计算得出需要完成的数量，成功完成的数量，未完成的数量 能够打印相应的任务调用执行报告。
7.failover 集群负载 单点故障 容错 灾备恢复处理.....

设计理念：
一套 应用组件
多种类型 一套 模板 
模板可生成 配置文件可生成 
一个垂直行业（或一个网站） 一个扒取工程 
多任务共同部署 可监控 可热调 支持分布式 


2 期 构想

1.
页面化生成某个网站的某个配置文件，在线配置xpath或json路径，并将配置化文件数据库化
附带信息包含：垂直网站类别，网站，扒取的分类，等等 
对于某类垂直网站字段类型大体相同，维度不同的现象 可以建立多维存储结构来表象某个字段数据
例如收益方式  7天-5%   半年-4%  加特殊的分隔符 将其区分 复杂可考虑某个字段直接用json来标识
{"字段名称":"收益方式","周期":"7天","收益率":"4%-7%"} 行列数据 一行数据套列式数据的表达方式。
实在不行就将其半机构化数据以json格式存储在Hbase或 mongdb中。
完全文本信息则直接不必考虑结构化的存储形式。考虑检索方案 例如solr和中文字库全文扫描来一些统计！

2.
定时任务处理，将一批配置好的垂直任务进行跑批执行，运行中出现问题的任务能够在线热处理并恢复
跑批处理不影响跑批的其他任务的执行。

3.
配置化提供了 几类角色 
a 生成配置文件和生成代码的角色，单线程main方法中能够执行单个任务
（或一批任务，一个模块的一级页面，二级页面或多个二级页面甚至3级页面）能够开发测试没有问题
加入执行队列中。
b 监控执行任务的角色，红绿黄灯来分别表示任务执行失败、任务正常、任务异常，完全执行完毕则将该任务列为历史任务  
在告警页面信息列表项中红色、黄色 分别显示执行异常的任务 并能够将异常任务修改执行状态传递给
后台开发人员让其调试运行直到可允许无异常 后提交该任务回到执行队列中（当然数据库中肯定有表记录
存储并且有相关的执行计划，执行计划有管理人员指定）。
c 管理人员 指定要扒取的网站名称、扒取的一级列表页面的链接及二级 以上的扒取需求，需要哪些数据项
并根据不同网站的不同形式就存储格式做配置化处理 对行内套列式存储的字段能够表象到二维交叉表中
做配置实现。例如前面提到的收益方式 指定该字段为收益方式 benefit_way 该字段为t_p2p_product表中
则在p2p_config表中指定 该字段为json结构 或 两个字面量的连接 连接符号 为- 或其他 字段统一指定
“”为空 防止不满足条件的全是链接符号 或者 {}空花括号！
d 领导层面 给上级提供查询各个行业的数据接口 数据历史量 数据当前运行情况  各种统计图表
不同领导数据不同的数据接口。外部演示部分 各种加密 和 ip限制，内部则根据级别分配不同权限。

4.
集群部分 mysql 分表分库 冗余存储 主从等等  hbase mongdb 以zk注册服务为特点的分布式存储

5.
分布式队列，分布式系统，所有节点存放同样的执行程序，执行任务从分布式队列中获取分配在各个节点执行，
执行中的数据部分或全部存放在缓存中，只有阶段性数据全部结束再做持久化批处理入库，这样可以保证各个
阶段的分布式事务的完整性! 部分数据进入缓存或入库则记录数据执行的槽点，若power failure 
则可以灾备恢复从槽点继续执行！ 
