package com.gcx.citygovcreditndrc.controller.evaluationrecord;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gcx.citygovcreditndrc.model.ResponseData;
import com.gcx.citygovcreditndrc.model.ServiceResult;
import com.gcx.citygovcreditndrc.model.common.Enclosure;
import com.gcx.citygovcreditndrc.model.evaluationrecord.Evaluationrecord;
import com.gcx.citygovcreditndrc.model.evaluationrecord.EvaluationrecordAo;
import com.gcx.citygovcreditndrc.service.common.EnclosureService;
import com.gcx.citygovcreditndrc.service.evaluationrecord.EvaluationrecordService;
import com.gcx.citygovcreditndrc.service.impl.CommonImpl;
@SuppressWarnings("all")
@Controller
@RequestMapping("/evaluationrecord")
public class EvaluationrecordController {
	@Resource
	EvaluationrecordService evaluationrecordService;
	
	@Resource
	CommonImpl commonImpl;
	
	@Resource
	EnclosureService enclosureService;
	
	

/*	@RequestMapping(value="/page/{pagenow}/{pagesize}",method=RequestMethod.POST)
	@ResponseBody
	public ResponseData findRecords(@RequestBody String record,@PathVariable("pagenow") int pagenow,@PathVariable("pagesize") int pagesize){
		Evaluationrecord recordObj = new Evaluationrecord();
		if(record!=null && !record.equals("")){
			recordObj  = JSON.parseObject(record, Evaluationrecord.class);
		}
		ServiceResult<Object> result = evaluationrecordService.findRecords(recordObj, pagenow, pagesize);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	*/
	@RequestMapping(value="/page",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData findRecords(HttpServletRequest request,HttpServletResponse response ,EvaluationrecordAo record){
		
		String userId=commonImpl.getUserId(request, response);
		if(!"".equals(userId) || userId != null){
			record.setUserid(userId);
		}
		Evaluationrecord recordObj = new Evaluationrecord();
		ServiceResult<Object> result = evaluationrecordService.findRecords(record,record.getPagenow(), record.getPagesize());
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		if(result.getTotal() !=null){
			responseData.putDataValue("count", result.getTotal());
		}
		return responseData;
	}
	
	
	
	
	//保存的方法
	@ResponseBody
	@RequestMapping(value="/add",method=RequestMethod.POST)
	public ResponseData addRecord(HttpServletRequest request,HttpServletResponse response,@RequestBody EvaluationrecordAo record){
		
		String userId=commonImpl.getUserId(request, response);
		if(!"".equals(userId) || userId != null){
			record.setUserid(userId);
		}
		
		ServiceResult result =evaluationrecordService.addRecord(record);
		Integer id = record.getId();
		
		//拿到添加的最新记录的ID，然后作为外键添加到 材料表中去
		Enclosure enclosure = record.getEnclosure();
		enclosure.setR1(Integer.toString(id));
		ServiceResult<Object> result2 = enclosureService.addRecord(enclosure);
		
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;

	}
	
	@ResponseBody
	@RequestMapping(value="/{id}/del",method=RequestMethod.GET)
	public ResponseData delRecord(@PathVariable("id") Integer record){
		ServiceResult<Object> result = evaluationrecordService.delRecord(record);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	
	@ResponseBody
	@RequestMapping(value="/id",method=RequestMethod.GET)
	public ResponseData delRecords(@RequestBody  Evaluationrecord record){
		ServiceResult<Object> result = evaluationrecordService.delRecord(record.getId());
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	
	
	
	@ResponseBody
	@RequestMapping(value="/update",method=RequestMethod.POST)
	public ResponseData updateRecord(@RequestBody Evaluationrecord record){
		ServiceResult<Object> result = evaluationrecordService.updateRecord(record);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	
}
