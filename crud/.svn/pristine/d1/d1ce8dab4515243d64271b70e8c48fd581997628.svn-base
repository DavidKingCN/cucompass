package com.gcx.citygovcreditndrc.controller.govServe;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.gcx.citygovcreditndrc.model.ResponseData;
import com.gcx.citygovcreditndrc.model.ServiceResult;
import com.gcx.citygovcreditndrc.model.common.Comment;
import com.gcx.citygovcreditndrc.model.common.Comments;
import com.gcx.citygovcreditndrc.model.common.Enclosure;
import com.gcx.citygovcreditndrc.model.common.HisGSAttachRo;
import com.gcx.citygovcreditndrc.model.common.NowGSAttachRo;
import com.gcx.citygovcreditndrc.model.govServe.GSListItem;
import com.gcx.citygovcreditndrc.model.govServe.GovServe;
import com.gcx.citygovcreditndrc.model.govServe.GovServeAo;
import com.gcx.citygovcreditndrc.model.govServe.GovServeVo;
import com.gcx.citygovcreditndrc.model.govServe.HisGS;
import com.gcx.citygovcreditndrc.model.govServe.NowGSRo;
import com.gcx.citygovcreditndrc.model.govServe.ToSupplyRo;
import com.gcx.citygovcreditndrc.service.common.EnclosureService;
import com.gcx.citygovcreditndrc.service.govServe.GovServeService;
import com.gcx.citygovcreditndrc.service.impl.CommonImpl;
import com.gcx.citygovcreditndrc.util.JSONUtil;
import com.gcx.citygovcreditndrc.util.TimeUtil;
@SuppressWarnings("all")
@Controller
@RequestMapping("/govServe")
public class GovServeController {
	@Resource
	GovServeService govServeService;
	@Resource
	EnclosureService enclosureService;
	
	@Resource
	CommonImpl commonImpl;
	
	//保存的方法
	@ResponseBody
	@RequestMapping(value="/add",method=RequestMethod.POST)
	public ResponseData addRecord(@RequestBody GovServe record){
		ServiceResult result =govServeService.addRecord(record);
		
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;

	}
	
	@ResponseBody
	@RequestMapping(value="/{id}/del",method=RequestMethod.GET)
	public ResponseData delRecord(@PathVariable("id") Integer record){
		ServiceResult<Object> result = govServeService.delRecord(record);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	
	@ResponseBody
	@RequestMapping(value="/update",method=RequestMethod.POST)
	public ResponseData updateRecord(@RequestBody GovServe record){
		ServiceResult<Object> result = govServeService.updateRecord(record);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}

	@RequestMapping(value="/page/{pagenow}/{pagesize}",method=RequestMethod.POST)
	@ResponseBody
	public ResponseData findRecords(@RequestBody String record,@PathVariable("pagenow") int pagenow,@PathVariable("pagesize") int pagesize){
		GovServe recordObj = new GovServe();
		if(record!=null && !record.equals("")){
			recordObj  = JSON.parseObject(record, GovServe.class);
		}
		ServiceResult<Object> result = govServeService.findRecords(recordObj, pagenow, pagesize);
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", result.getData());
		}
		return responseData;
	}
	
	@ResponseBody
	@RequestMapping(value="/addGSAndAtts",method=RequestMethod.POST)
	public ResponseData addServAndAttch(HttpServletRequest request,HttpServletResponse response ,@RequestBody GovServeVo record){
		String userId=commonImpl.getUserId(request, response);
		ResponseData responseData = ResponseData.serverInternalError();
		boolean set = userId == null? true:false;
		
		ServiceResult result =null;
		GovServe GS = record.getGovServe();
		//check 
		String applyServe = GS.getApplyServe().trim();
		if(applyServe==null || applyServe.trim().equalsIgnoreCase("")){
			return responseData.putDataValue("reason", "申请服务名称不能为空！");
		}
		GS.setApplyServe(applyServe);
		if(!set)
			GS.setA1(userId);
		
		GovServe govServeCond = new GovServe();
		govServeCond.setApplyServe(applyServe);
		
		int count = govServeService.findByRecordCount(govServeCond);
		if(count > 1){
			responseData.putDataValue("result", "申请服务【"+applyServe+"】存在的条数大于1条！");
			return responseData;
		}
		
		responseData = ResponseData.ok();
		List<Enclosure> es = record.getAttachments();
		GovServe gs = new GovServe();
		BeanUtils.copyProperties(GS, gs);
		boolean hasAtts = false;
		//是否有附件
		for(Enclosure e:es){
			String attrPath = e.getMaterial();
			if(attrPath!=null && !attrPath.trim().equals("")){
				hasAtts = true;
			}
		}
		if(!hasAtts&&count == 1){
			return responseData.putDataValue("result", "申请服务【"+applyServe+"】重置失败，不含附件！");
		}
		//含有附件的想重新放入一个容器中
		List<Enclosure> validAtts = new ArrayList<>();
		
		for(Enclosure e:es){
			String attrPath = e.getMaterial();
			if(attrPath!=null && !attrPath.trim().equals("")){
				validAtts.add(e);
			}
		}
		
		
		/**存在该服务，且存在上传附件则重置state为待审核**/
		if(count == 1 && es.size()>0){
			//根据批次查看上一批次是否已经审核，如果没有则提示上一批次还没审核，请去审核
			
			
			GovServe existGS = govServeService.findOneByRecord(govServeCond);
			String batchNo = existGS.getA3();
			int newBatchNo = Integer.parseInt(batchNo)+1;
			String auditJson = existGS.getAuditContent();
			int cs = 0;
			if(auditJson!=null&&!auditJson.trim().equalsIgnoreCase("") ){
				Comments comments  = JSONUtil.parseJson(auditJson, Comments.class);
				List<Comment> audits = comments.getAudits();
				cs = audits.size();
			}
			
			if(cs==newBatchNo-1){
				return ResponseData.serverInternalError().putDataValue("result", "申请服务【"+applyServe+"】上一批附件还没有审核并批复回复意见！");
			}
			gs.setA3(newBatchNo+"");
			gs.setId(existGS.getId());
			gs.setState("待审核");  //已回复
			
			responseData.putDataValue("result", "申请服务【"+applyServe+"】重置成功！");
		}
		/**新创建的服务**/
		if(count == 0){
			gs.setA3("0");
			gs.setState("待审核");
			//申请时间
			gs.setApplyTime(TimeUtil.nowToTimeString());
			responseData.putDataValue("result", "申请服务【"+applyServe+"】申请成功！");
		}
		Integer pk = govServeService.saveOrUpdateGS(gs);
		//将合法的路径录入
		for(Enclosure e:validAtts){
			if(!set)
				e.setR2(userId);
			//附件的外键规则为 主表外键-批次号
			e.setR4(pk+"-"+gs.getA3());
			enclosureService.addRecord(e);
		}
			
		return responseData;

	}
	
	
	@RequestMapping(value="/queryEntry",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData queryEntry(GovServeAo govServe){
		ServiceResult<Object> result = govServeService.findRecords(govServe, govServe.getPageNo(), govServe.getPageSize());
		
		List<GovServe> list = (List<GovServe>)result.getData();
		List<GSListItem> items = new ArrayList<GSListItem>();
		GSListItem item = null;
		for(GovServe serve:list){
			int id = serve.getId();
			String batchNoStr = serve.getA3();
			String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
			Integer batchNum = Integer.parseInt(batchNo);
			item = new GSListItem();
			BeanUtils.copyProperties(serve, item);
			item.setAttachment(enclosureService.getAttachStrByPid(id,batchNum));
			//该服务下的所有附件列表
			item.setAttachments(enclosureService.findAttsByPid(id,batchNum));
			items.add(item);
		}
		ResponseData responseData = ResponseData.ok();
		if(result.getData() !=null){
			responseData.putDataValue("result", items).putDataValue("total", result.getTotal());
		}
		return responseData;
	}
	
	@RequestMapping(value="/seeHisGovServ",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData seeHisGovServ(GovServeAo govServe){
		Integer id = govServe.getId();
		GovServe targetObj = govServeService.findById(id);
		HisGS hisGs = new HisGS();
		BeanUtils.copyProperties(targetObj, hisGs);
		String batchNoStr = targetObj.getA3();
		String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
		Integer batchNum = Integer.parseInt(batchNo);
		return ResponseData.ok().putDataValue("govServe", hisGs).putDataValue("attachments", enclosureService.findAttsByPid(id,batchNum));
	}
	
	
	@RequestMapping(value="/seeDetail",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData seeDetail(GovServeAo govServe){
		Integer id = govServe.getId();
		GovServe targetObj = govServeService.findById(id);
		
		String batchNoStr = targetObj.getA3();
		String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
		Integer batchNum = Integer.parseInt(batchNo);
		return ResponseData.ok().putDataValue("govServe", targetObj).putDataValue("attachments", enclosureService.findAttsByPid(id,batchNum));
	}
	
	@RequestMapping(value="/seeDetailNow",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData seeDetailNow(GovServeAo govServe){
		Integer id = govServe.getId();
		GovServe targetObj = govServeService.findById(id);
		NowGSRo nowGs = new NowGSRo();
		BeanUtils.copyProperties(targetObj, nowGs);
		
		String batchNoStr = targetObj.getA3();
		String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
		Integer batchNum = Integer.parseInt(batchNo);
		
		List<Enclosure> attachments = enclosureService.allAttsByPid(id, batchNum);//enclosureService.findAttachmentsByPid(id);
		List<NowGSAttachRo> nowAttachs = new ArrayList<>();
		NowGSAttachRo nowAttach = null;
		for(Enclosure enc : attachments){
			nowAttach = new NowGSAttachRo();
			
			BeanUtils.copyProperties(enc, nowAttach);
			nowAttachs.add(nowAttach);
		}
		return ResponseData.ok().putDataValue("govServe", nowGs).putDataValue("attachments", nowAttachs);
	}
	
	
	@RequestMapping(value="/toSupply",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData toSupply(GovServeAo govServe){
		Integer id = govServe.getId();
		GovServe targetObj = govServeService.findById(id);
		ToSupplyRo toSupplyRo = new ToSupplyRo();
		BeanUtils.copyProperties(targetObj, toSupplyRo);
		List<Enclosure> attachments = null;//enclosureService.findAttachmentsByPid(id);
//		List<HisGSAttachRo> hisAttachs = new ArrayList<>();
//		HisGSAttachRo hisAttach = null;
//		for(Enclosure enc : attachments){
//			hisAttach = new HisGSAttachRo();
//			
//			BeanUtils.copyProperties(enc, hisAttach);
//			hisAttachs.add(hisAttach);
//		}
		String batchNoStr = govServe.getA3();
		String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
		Integer batchNum = Integer.parseInt(batchNo);
//		enclosureService.findAttsByPid(id,batchNum);
		return ResponseData.ok().putDataValue("govServe", toSupplyRo).putDataValue("attachments", enclosureService.findAttsByPid(id,batchNum));
	}
	
	
	@RequestMapping(value="/toAudit",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData toAudit(GovServeAo govServe){
		Integer id = govServe.getId();
		GovServe targetObj = govServeService.findById(id);
		ToSupplyRo toSupplyRo = new ToSupplyRo();
		BeanUtils.copyProperties(targetObj, toSupplyRo);
		String batchNoStr = targetObj.getA3();
		String batchNo = batchNoStr==null || batchNoStr==""||!batchNoStr.matches("\\d+")?"0": batchNoStr;
		Integer batchNum = Integer.parseInt(batchNo);
		return ResponseData.ok().putDataValue("govServe", toSupplyRo).putDataValue("attachments", enclosureService.findAttsByPid(id,batchNum));
	}
	/**
	 * 
	 * @param govServe
	 * @return
	 */
	@RequestMapping(value="/audit",method=RequestMethod.GET)
	@ResponseBody
	public ResponseData audit(GovServeAo govServe){
		Integer pk = govServe.getId();
		if(pk==null){
			return ResponseData.serverInternalError().putDataValue("reason", "没有传递主键！");
		}
		GovServe targetGS = govServeService.findById(pk);
		
		if(targetGS==null){
			return ResponseData.serverInternalError().putDataValue("reason", "数据库中不存在该条记录!");
		}
		
		targetGS.setState("已回复");
		String batchNo = targetGS.getA3();
		if(batchNo==null ){
			return ResponseData.serverInternalError().putDataValue("reason", "批次号不能为NULL！");
		}
		batchNo = batchNo.trim();
		if(batchNo .equals("")){
			return ResponseData.serverInternalError().putDataValue("reason", "批次号不能为空！");
		}
		if(! batchNo.matches("\\d+")){
			return ResponseData.serverInternalError().putDataValue("reason", "批次号必须为数字！");
		}
		int no = Integer.parseInt(batchNo);
		//一条审批意见和审批提交时间
		Comment c = new Comment();
		//评论为空则默认为“”
		c.setContent(govServe.getComment()==null?"":govServe.getComment());
		c.setTm(TimeUtil.nowToTimeString());
		Comments comments  =null;
		List<Comment> audits = null;
		if(no==0){
			comments  = new Comments();
			audits = new ArrayList<>();
			
		}else{
			String auditContent = targetGS.getAuditContent();
			comments  = JSONUtil.parseJson(auditContent, Comments.class);
			audits = comments.getAudits();
		}
		audits.add(c);
		
		if(audits.size()!= no+1){
			return ResponseData.serverInternalError().putDataValue("reason", "审批次数与意见个数不匹配！");
		}
		comments.setAudits(audits);
		targetGS.setAuditContent(JSONUtil.toJson(comments));
		
		//审批人
		targetGS.setAuditor(govServe.getAuditor());
		//审批单位
		targetGS.setAuditDept(govServe.getAuditDept());
		//审批时间
		targetGS.setAuditTime(TimeUtil.nowToTimeString());
		govServeService.saveOrUpdate(targetGS);
		return ResponseData.ok();
	}
}
